################################################################################
# 🚽 BATHROOM AUTOMATION PACKAGE v1.1 - FINAL REFACTOR
# Author: Frank S Elaschat
# Updated: 2025-08-30
# Status: ✅ Finalized with all bug fixes, hold timeout, and schema updates.
################################################################################

input_boolean:
  bathroom_motion_automation:
    name: "Bathroom Motion Automation"
    icon: mdi:motion-sensor
    initial: true
  bathroom_door_closed_override:
    name: "Bathroom Door Closed Override"
    icon: mdi:door-closed
    initial: true
  bathroom_adaptive_override:
    name: "Bathroom Adaptive Override"
    icon: mdi:tune
    initial: false
  bathroom_100_percent_hold:
    name: "Bathroom 100% Hold Mode"
    icon: mdi:lightbulb-on
    initial: false

input_number:
  bathroom_hold_timeout:
    name: "Bathroom Hold Timeout (Minutes)"
    min: 15
    max: 90
    step: 5
    initial: 30
    unit_of_measurement: "min"
    icon: mdi:timer-lock
  bathroom_override_brightness:
    name: "Bathroom Override Brightness"
    min: 10
    max: 100
    step: 5
    initial: 100
    unit_of_measurement: "%"
    icon: mdi:brightness-7
  bathroom_night_max_brightness:
    name: "Bathroom Night Max Brightness"
    min: 1
    max: 25
    step: 1
    initial: 1
    unit_of_measurement: "%"
    icon: mdi:brightness-2
  bathroom_fallback_day_brightness:
    name: "Bathroom Day Fallback Brightness"
    min: 20
    max: 100
    step: 5
    initial: 70
    unit_of_measurement: "%"
    icon: mdi:brightness-6
  bathroom_fallback_evening_brightness:
    name: "Bathroom Evening Fallback Brightness"
    min: 20
    max: 80
    step: 5
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:brightness-4

template:
  - binary_sensor:
      - name: "Bathroom Motion Combined"
        state: >-
          {{ is_state('binary_sensor.bathroom_iris_occupancy', 'on') or
              is_state('binary_sensor.bathroom_x_occupancy', 'on') }}
        icon: >-
          {{ 'mdi:motion-sensor' if this.state == 'on' else 'mdi:motion-sensor-off' }}
  - sensor:
      - name: "Bathroom Target Brightness"
        unique_id: bathroom_target_brightness_als
        unit_of_measurement: "%"
        state: >-
          {% set use_pyscript = is_state('input_boolean.all_rooms_use_pyscript', 'on') %}
          {% set home_mode = states('input_select.home_state') %}
          {% set hold_mode = is_state('input_boolean.bathroom_100_percent_hold', 'on') %}
          {% set override_active = is_state('input_boolean.bathroom_adaptive_override', 'on') %}

          {% if hold_mode %} 100
          {% elif override_active %}
            {{ states('input_number.bathroom_override_brightness') | int(100) }}
          {% elif home_mode == 'Night' %}
            {{ states('input_number.bathroom_night_max_brightness') | int(1) }}
          {% elif use_pyscript and states('pyscript.test_bathroom_brightness') not in ['unknown', 'unavailable'] %}
            {{ states('pyscript.test_bathroom_brightness') | int(50) }}
          {% elif is_state('input_boolean.adaptive_learning_enabled', 'on') and state_attr('sensor.learned_brightness_bathroom', 'using_learned') %}
            {{ states('sensor.learned_brightness_bathroom') | int(50) }}
          {% elif is_state('input_boolean.intelligent_lighting_enable', 'on') %}
            {{ states('sensor.intelligent_brightness_bathroom') | int(50) }}
          {% else %}
            {% if home_mode in ['Evening', 'Early Morning'] %}
              {{ states('input_number.bathroom_fallback_evening_brightness') | int(50) }}
            {% elif home_mode == 'Day' %}
              {{ states('input_number.bathroom_fallback_day_brightness') | int(70) }}
            {% else %} 50
            {% endif %}
          {% endif %}
        attributes:
          calculation_source: >
            {% set use_pyscript = is_state('input_boolean.all_rooms_use_pyscript', 'on') %}
            {% set hold_mode = is_state('input_boolean.bathroom_100_percent_hold', 'on') %}
            {% set override_active = is_state('input_boolean.bathroom_adaptive_override', 'on') %}
            {% set home_mode = states('input_select.home_state') %}

            {% if hold_mode %} Door Closed Hold
            {% elif override_active %} Manual Override
            {% elif home_mode == 'Night' %} Night Mode Lock
            {% elif use_pyscript and states('pyscript.test_bathroom_brightness') not in ['unknown', 'unavailable'] %} PyScript Engine
            {% elif is_state('input_boolean.adaptive_learning_enabled', 'on') and state_attr('sensor.learned_brightness_bathroom', 'using_learned') %} Adaptive Learning
            {% elif is_state('input_boolean.intelligent_lighting_enable', 'on') %} Intelligent System
            {% else %} Fallback Values
            {% endif %}

      - name: "Bathroom ALS Status"
        state: >-
          {% set enabled = is_state('input_boolean.bathroom_motion_automation', 'on') %}
          {% set motion = is_state('binary_sensor.bathroom_motion_combined', 'on') %}
          {% set brightness = states('sensor.bathroom_target_brightness') | int(0) %}
          {% set source = state_attr('sensor.bathroom_target_brightness', 'calculation_source') %}
          {% set door_closed = is_state('binary_sensor.bathroom_contact_contact', 'off') %}
          {% set away_mode = is_state('input_select.home_state', 'Away') %}
          {% set error = states('input_text.als_error_bathroom') %}
          {% if error not in ['', 'unknown', 'unavailable'] %} 🚫 Error Present
          {% elif away_mode %} 🚪 Away Mode
          {% elif not enabled %} ⏸️ System Disabled
          {% elif door_closed and is_state('light.bathroom_2_main_lights','on') %} 🚪 Door Closed ({{ source }})
          {% elif motion %} 💡 Motion Active ({{ brightness }}%)
          {% else %} 🛁 Ready ({{ source }})
          {% endif %}
        icon: >-
          {% set status = this.state %}
          {% if '🚫' in status %} mdi:alert-circle
          {% elif '⏸️' in status %} mdi:pause-circle
          {% elif '🚪' in status %} mdi:door-closed
          {% elif '💡' in status %} mdi:lightbulb-on
          {% else %} mdi:bathtub
          {% endif %}
automation:
  - id: bathroom_motion_on
    alias: "Bathroom - Motion Detected"
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.bathroom_motion_combined
        to: "on"
    conditions:
      - condition: state
        entity_id: input_boolean.bathroom_motion_automation
        state: "on"
      - condition: not
        conditions:
          - condition: state
            entity_id: input_select.home_state
            state: "Away"
      - condition: template
        value_template: >
          {{ trigger.from_state is not none and
              trigger.from_state.state not in ['unknown', 'unavailable'] }}
    actions:
      - action: light.turn_on
        target:
          entity_id: light.bathroom_2_main_lights
        data:
          brightness_pct: "{{ states('sensor.bathroom_target_brightness') | int }}"

  - id: bathroom_door_closes
    alias: "Bathroom - Door Closes"
    description: "When door closes, set lights to 100% and enable hold mode"
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.bathroom_contact_contact
        to: "off"
        for:
          seconds: 2
    conditions:
      - condition: state
        entity_id: input_boolean.bathroom_motion_automation
        state: "on"
      - condition: not
        conditions:
          - condition: state
            entity_id: input_select.home_state
            state: "Away"
    actions:
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.bathroom_100_percent_hold
      - action: light.turn_on
        target:
          entity_id: light.bathroom_2_main_lights
        data:
          brightness_pct: 100

  - id: bathroom_door_opens
    alias: "Bathroom - Door Opens"
    description: "When door opens, disable hold mode and transition lights back to smart brightness"
    mode: single
    triggers:
      - trigger: state
        entity_id: binary_sensor.bathroom_contact_contact
        to: "on"
        for:
          seconds: 2
    conditions:
      - condition: state
        entity_id: input_boolean.bathroom_motion_automation
        state: "on"
      - condition: state
        entity_id: light.bathroom_2_main_lights
        state: "on"
      - condition: not
        conditions:
          - condition: state
            entity_id: input_select.home_state
            state: "Away"
    actions:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.bathroom_100_percent_hold
      - action: light.turn_on
        target:
          entity_id: light.bathroom_2_main_lights
        data:
          brightness_pct: "{{ states('sensor.bathroom_target_brightness') | int }}"
          transition: 5

  - id: bathroom_motion_clear
    alias: "Bathroom - Motion Clears"
    description: "Turn off lights after 30s of no motion, but ONLY if door is open"
    mode: restart
    triggers:
      - trigger: state
        entity_id: binary_sensor.bathroom_motion_combined
        to: "off"
        for:
          seconds: 30
    conditions:
      - condition: state
        entity_id: input_boolean.bathroom_motion_automation
        state: "on"
      - condition: state
        entity_id: light.bathroom_2_main_lights
        state: "on"
      - condition: state
        entity_id: binary_sensor.bathroom_contact_contact
        state: "on"
    actions:
      - action: light.turn_off
        target:
          entity_id: light.bathroom_2_main_lights
        data:
          transition: 3

  - id: bathroom_hold_mode_timeout
    alias: "Bathroom - Hold Mode Timeout Failsafe"
    description: "Turns off 100% hold mode after a set duration to prevent it getting stuck"
    mode: single
    triggers:
      - trigger: state
        entity_id: input_boolean.bathroom_100_percent_hold
        to: "on"
        for:
          minutes: "{{ states('input_number.bathroom_hold_timeout') | int(30) }}"
    conditions:
      - condition: state
        entity_id: input_boolean.bathroom_100_percent_hold
        state: "on"
    actions:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.bathroom_100_percent_hold
      - action: logbook.log
        data:
          name: "Bathroom Hold Mode"
          message: "⏰ Hold mode timed out and was automatically disabled."